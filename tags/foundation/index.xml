<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Foundation on manumateos.dev</title><link>/tags/foundation/</link><description>Recent content in Foundation on manumateos.dev</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Mon, 29 Jan 2024 15:40:34 +0100</lastBuildDate><atom:link href="/tags/foundation/index.xml" rel="self" type="application/rss+xml"/><item><title>Mastering Swift Foundation Formatter API. Basics</title><link>/posts/mastering-swift-foundation-formatter-api/</link><pubDate>Mon, 29 Jan 2024 15:40:34 +0100</pubDate><guid>/posts/mastering-swift-foundation-formatter-api/</guid><description>Una cosa que me ha gustado usar en la última app que he desarrollado son los formatters incluidos en muchas clases. Puedo convertir números y fechas en cadenas legibles, formateadas y que usan la locale que elija (o la del sistema) con muy poco código.
Si tienes la posibilidad de soportar solo de iOS 15 en adelante (que a estas alturas de la película probablemente sea tu caso) usa esto, que es MUY limpio y cómodo.</description></item><item><title>Nuevas API para parsear fechas</title><link>/posts/date-parsestrategy/</link><pubDate>Mon, 13 Mar 2023 19:00:26 +0100</pubDate><guid>/posts/date-parsestrategy/</guid><description>Pocas cosas odio más que manejar fechas y horas en mi código. Creo que es una tirria compartida: las API de NSDateFormatter y demás[^ Aplica también a los parseos de divisas, por ejemplo.] son incómodas y ocupan muchas líneas para acciones tan elementales como transformar una string que representa un timestamp en un objeto Date.
Por suerte en iOS 15 y Swift 5.5 se introdujeron nuevas API que reducen esto a mucho menos código y más sencillo de entender.</description></item></channel></rss>