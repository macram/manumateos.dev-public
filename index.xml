<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>manumateos.dev</title><link>/</link><description>Recent content on manumateos.dev</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Thu, 21 Sep 2023 10:50:26 +0100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Checklists del tema Minimal de Obsidian</title><link>/posts/obsidian-minimal-checkboxes/</link><pubDate>Thu, 21 Sep 2023 10:50:26 +0100</pubDate><guid>/posts/obsidian-minimal-checkboxes/</guid><description>Llevo un tiempo intentando usar Obsidian como segundo cerebro, al menos en cuanto a trabajo se refiere. Es una aplicación que me encanta, estoy habituado a la sintaxis de Markdown y, si no fuera porque es Electron, sería prácticamente perfecta para mí.
Y una vez configurado para tener otra pinta distinta a la de por defecto el programa es maravilloso. Ya ahondaré en cómo lo uso y cómo lo tengo configurado, pero de momento quiero dejar el enlace a la documentación de checklists del tema Minimal (el que uso), porque es la base de mi método de organización actual en el trabajo.</description></item><item><title>Cómo usar fuentes personalizadas dentro de un paquete de Swift Package Manager</title><link>/posts/fuentes-personalizadas-paquete-swift-package-manager/</link><pubDate>Tue, 05 Sep 2023 19:35:34 +0200</pubDate><guid>/posts/fuentes-personalizadas-paquete-swift-package-manager/</guid><description>El proceso habitual para utilizar fuentes personalizadas en una aplicación de iOS implica añadirlas manualmente al fichero Info.plist, a un array con la clave UIAppFonts donde pondríamos todos los nombres de todos los ficheros que queramos usar, algo como JetBrainsMono-Regular.ttf. Pero la cosa cambia cuando lo que estás desarrollando está dentro de un paquete de Swift Package Manager; ahí no hay fichero donde meter las cosas.
El procedimiento es ligeramente distinto, pero se resume en:</description></item><item><title>Reducir el uso de CPU de Google Maps</title><link>/posts/google-maps-sdk-uso-cpu/</link><pubDate>Fri, 18 Aug 2023 16:10:34 +0100</pubDate><guid>/posts/google-maps-sdk-uso-cpu/</guid><description>En una pantalla con un mapa que utiliza el SDK de Google Maps es probable que, si tienes muchos marcadores con una iconView, experimentes un gran uso de CPU. Esto entiendo que es debido fundamentalmente al repintado de estas vistas en cada uno de los frames.
La solución rápida para solucionarlo, o al menos mitigarlo, es establecer a false la propiedad tracksViewChanges. Eso sí, si vas a animar la vista (por ejemplo en el momento de aparecer, o al pulsarlas) será necesario que establezcas esa propiedad a true al comenzar la animación y a false justo al finalizar.</description></item><item><title>What’s the Gradle Wrapper and Why Use it?</title><link>/posts/gradle-wrapper-jar/</link><pubDate>Thu, 16 Mar 2023 16:40:34 +0100</pubDate><guid>/posts/gradle-wrapper-jar/</guid><description>Este enlace responde a mi pregunta de &amp;ldquo;debo subir este fichero .jar al repositorio Git o no&amp;rdquo;. Respuesta rápida: sí.</description></item><item><title>Añadir repositorio de Artifactory como origen de Cocoapods</title><link>/posts/cocoapods-artifactory/</link><pubDate>Tue, 14 Mar 2023 15:58:07 +0100</pubDate><guid>/posts/cocoapods-artifactory/</guid><description>Hay que instalar la gema cocoapods-art. gem install cocoapods-art. Nada grave.
Luego hay que configurar el fichero .netrc con la URL del servidor y las credenciales de acceso (que no es contraseña, sino API key).
Luego se añaden los repositorios con el comando pod repo-art add (nombre) (url). Atención: no es la URL del repositorio sin más. Es mejor pulsar el botón &amp;ldquo;Set me up&amp;rdquo;, que muestra directamente el comando que hay que copiar y pegar.</description></item><item><title>(mac)OStalgia</title><link>/posts/macostalgia/</link><pubDate>Mon, 13 Mar 2023 19:46:34 +0100</pubDate><guid>/posts/macostalgia/</guid><description>Michael Feeney creó un vídeo mostrando una visión de cómo podrían ser aplicaciones y servicios que usamos hoy, pero con la interfaz de Mac OS 9. Adoro este tipo de obras, casi retrodistópicas.
https://youtu.be/2DwJNQMBCOk</description></item><item><title>Nuevas API para parsear fechas</title><link>/posts/date-parsestrategy/</link><pubDate>Mon, 13 Mar 2023 19:00:26 +0100</pubDate><guid>/posts/date-parsestrategy/</guid><description>Pocas cosas odio más que manejar fechas y horas en mi código. Creo que es una tirria compartida: las API de NSDateFormatter y demás[^ Aplica también a los parseos de divisas, por ejemplo.] son incómodas y ocupan muchas líneas para acciones tan elementales como transformar una string que representa un timestamp en un objeto Date.
Por suerte en iOS 15 y Swift 5.5 se introdujeron nuevas API que reducen esto a mucho menos código y más sencillo de entender.</description></item><item><title>Novedades en Swift 5.8</title><link>/posts/swift-5-8/</link><pubDate>Thu, 09 Mar 2023 11:37:09 +0100</pubDate><guid>/posts/swift-5-8/</guid><description>Paul Hudson desgrana las novedades que hay en la nueva versión del lenguaje, que llegará junto con Xcode 13.4. Parece más evolución que revolución.</description></item><item><title>How atomic Git commits dramatically increased my productivity - and will increase yours too</title><link>/posts/atomic-commits/</link><pubDate>Wed, 08 Mar 2023 16:40:34 +0100</pubDate><guid>/posts/atomic-commits/</guid><description>Samuel Faure da varias razones por las que publicar commits atómicos en Git.</description></item><item><title>Evitar subir ciertos cambios en un fichero a Git</title><link>/posts/git-assume-unchanged/</link><pubDate>Tue, 07 Mar 2023 17:00:26 +0100</pubDate><guid>/posts/git-assume-unchanged/</guid><description>Si en algún momento de la historia de tu desarrollo estás modificando frecuentemente un fichero y no quieres que tu cliente de Git lo notifique continuamente como cambiado basta con utilizar este comando.
git update-index --skip-worktree &amp;lt;fichero/s&amp;gt; Este bit se elimina automáticamente cuando se reciben cambios en este fichero. Es decir, si hay cambios en el servidor y nosotros hacemos git pull, el bit se elimina automáticamente.
Puede verificarse el estado con el siguiente comando:</description></item><item><title>UIKeyboardLayoutGuide</title><link>/posts/uikeyboardlayoutguide/</link><pubDate>Wed, 21 Dec 2022 16:32:35 +0100</pubDate><guid>/posts/uikeyboardlayoutguide/</guid><description>En iOS 15 se introdujo una nueva forma de hacer que nuestras aplicaciones respondan a eventos tan comunes como la aparición o desaparición de un teclado (y también a los teclados flotantes que pueden ocurrir en iPadOS). Se trata del nuevo atributo keyboardLayoutGuide que forma parte de UIView.
Lo que hace años suponía estar escuchando a una notificación y recolocar vistas (activando o desactivando constraints o, peor, modificando a mano el frame de ciertos elementos que puedan estar afectados) ahora se reduce a crear una nueva constraint que se coloque en uno de los anclas de esta layout guide, generalmente el topAnchor.</description></item><item><title>Eliminar ficheros .DS_Store de un plumazo</title><link>/posts/remove-dsstore-files/</link><pubDate>Mon, 05 Dec 2022 19:17:35 +0100</pubDate><guid>/posts/remove-dsstore-files/</guid><description>Hay una forma muy sencilla de eliminar de un plumazo del repositorio todos los ficheros .DS_Store, tan molestos y que incluso están prohibidos en algunos de los repositorios.
find . -name &amp;#39;.DS_Store&amp;#39; -type f -delete` En principio también es posible deshabilitar la creación de estos ficheros. Basta ejecutar el comando siguiente y reiniciar el Mac.
defaults write com.apple.desktopservices DSDontWriteNetworkStores true Estos archivos contienen metainformación sobre las carpetas, como la posición y configuración de los iconos; puede resultar útil a algunos usuarios.</description></item><item><title>Permitir el uso de la tecla Menú/Back en un UIAlertController</title><link>/posts/allow-menu-key-on-uialertcontroller/</link><pubDate>Thu, 26 May 2022 22:33:26 +0100</pubDate><guid>/posts/allow-menu-key-on-uialertcontroller/</guid><description>Un UIAlertController es quizá el modo más sencillo, lógico y normal de mostrar un modal en una aplicación de tvOS. Es nativo del sistema, permite colocar acciones… Es hasta razonablemente bonito.
Y si bien es sencillo tener un UIAlertController con varios botones como el de la imagen inferior, hay casos en los que podemos querer uno que sea meramente informativo o con un mensaje de “Cargando” (este caso es especialmente frecuente en apps de tvOS).</description></item><item><title>Un Apple TV no se enciende sin HDMI</title><link>/posts/apple-tv-does-not-turn-on/</link><pubDate>Wed, 27 Apr 2022 22:33:26 +0100</pubDate><guid>/posts/apple-tv-does-not-turn-on/</guid><description>Por una parte: sabéis que podéis ver desde vuestro Mac la pantalla de un Apple TV. Siempre[^ Siempre que los astros se alineen, que ya sabemos cómo funcionan a veces estas cosas.] que tengáis el Apple TV habilitado para desarrollo y en la misma red local veréis como origen de vídeo en una grabación de vídeo de Quicktime vuestro Apple TV, igual que veríais vuestra webcam o un iPhone conectado a través de cable USB.</description></item><item><title>No Space in Method Call Violation en clausura final</title><link>/posts/swiftlint-space-between-name-and-parenthesis-trailing-clausure/</link><pubDate>Mon, 21 Mar 2022 13:22:09 +0100</pubDate><guid>/posts/swiftlint-space-between-name-and-parenthesis-trailing-clausure/</guid><description>Es muy probable que en tu proyecto de app en Swift termines usando una sintaxis que incluya una clausura al final de las llamadas (por ejemplo, algún tipo de completionHandler). Esa sintaxis tiene una pinta tal que así:
method(param1: foo, param2: bar) { whatever in // Código } Esta sintaxis es análoga a esta otra.
method(param1: foo, param2: bar, completionHandler: { whatever in // Código }) Pues bien. Tras actualizar a Xcode 13.</description></item><item><title>Insertar notas al pie en Markdown</title><link>/posts/notas-al-pie-markdown/</link><pubDate>Sun, 06 Mar 2022 20:23:26 +0100</pubDate><guid>/posts/notas-al-pie-markdown/</guid><description>Escribiendo un artículo para otro sitio me he visto en la necesidad de insertar notas al pie. Como siempre, estaba escribiendo usando Markdown (habitualmente uso iA Writer), así que busqué si había una sintaxis para ello.
Resulta que es algo que en el Markdown original no está definido. Pero sí que existe una sintaxis extendida de Markdown para añadir funcionalidades que no están en el lenguaje original.
La de las notas al pie1 es sencilla.</description></item><item><title>Generar sitio Web con Hugo desde GitHub Actions</title><link>/posts/github-actions-hugo/</link><pubDate>Fri, 11 Feb 2022 23:48:45 +0100</pubDate><guid>/posts/github-actions-hugo/</guid><description>Ya os conté que este sitio Web está generado utilizando Hugo, un generador de sitios Web estáticos. Y es algo que me gusta, pero tal como lo configuré inicialmente tenía una cuestión que me resultaba incómoda. Básicamente me obligaba a publicar el sitio Web utilizando mi ordenador, puesto que necesitaba ejecutar hugo -D para generar los ficheros HTML, CSS, XML y tal.
Una mejora que me parece obvia en este caso es que el sitio Web se genere utilizando un sistema de integración continua.</description></item><item><title>Discover concurrency</title><link>/posts/discover-concurrency/</link><pubDate>Sun, 23 Jan 2022 19:40:34 +0100</pubDate><guid>/posts/discover-concurrency/</guid><description>John Sundell tiene una página que es ideal para comenzar a conocer el nuevo sistema de concurrencia de Swift (async, await y esa chufla).</description></item><item><title>30 Tips to Make You a Better iOS Dev</title><link>/posts/30-tips-to-make-you-a-better-ios-dev/</link><pubDate>Sun, 19 Dec 2021 19:40:34 +0100</pubDate><guid>/posts/30-tips-to-make-you-a-better-ios-dev/</guid><description>Rony Fadel ha elaborado una lista (en inglés) con 30 consejos que podrían hacernos mejorar como desarrolladores iOS.</description></item><item><title>Crear primer sitio Web con Hugo</title><link>/posts/crear-primer-sitio-web-hugo/</link><pubDate>Tue, 07 Dec 2021 18:21:45 +0100</pubDate><guid>/posts/crear-primer-sitio-web-hugo/</guid><description>Llevaba tiempo queriendo escribir una bitácora de desarrollo donde poner las notas que voy recopilando mientras voy desarrollando. Y he intentado varias cosas: poner una página pública en Notion (herramienta que no he conseguido acostumbrarme a usar) o incluso montar otro sitio Web con WordPress. Pero en realidad buscaba una herramienta bastante más sencilla, algo que me permitiera escribir en Markdown y publicar un sitio Web, sin más. WordPress en este caso era matar moscas a cañonazos.</description></item><item><title>UIView.userInteractionEnabled</title><link>/posts/userinteractionenabled/</link><pubDate>Tue, 07 Dec 2021 18:18:49 +0100</pubDate><guid>/posts/userinteractionenabled/</guid><description>El parámetro userInteractionEnabled se propaga a todas las subviews. Es decir, si aplicamos a un UIView este parámetro, ninguna de sus subvistas responderán a interacciones por parte del usuario.
On iOS, if a superview&amp;rsquo;s userInteractionEnabled is NO, then all subviews are disabled as well?
Tampoco funciona si creas una subclase de UIView y sobrescribimos el método tal que así.
override func point(inside point: CGPoint, with event: UIEvent?) -&amp;gt; Bool { return false } No obstante sí que es posible usar ese mismo método y marcar zonas de la UIView que capturen el toque, y marcar zonas que no; las que no capturan el toque serán las que devuelvan false al punto point que se pasa por parámetro, y si queremos capturar el toque, devolveremos true.</description></item><item><title>UIButton.tintColor</title><link>/posts/uibutton-tintcolor/</link><pubDate>Tue, 07 Dec 2021 18:17:35 +0100</pubDate><guid>/posts/uibutton-tintcolor/</guid><description>Como bien especifica la documentación de Apple, si el UIButton es de tipo custom no va a funcionar cambiar el tintColor, sino que se va a quedar la imagen tal cual.
This property has no default effect for buttons with type UIButton.ButtonType.custom. For custom buttons, you must implement any behavior related to tintColor yourself.
El fix es tan simple como cambiar dicho UIButton a tipo system.</description></item><item><title>Obtener capturas de pantalla de un vídeo</title><link>/posts/screenshot-from-video/</link><pubDate>Tue, 07 Dec 2021 18:16:38 +0100</pubDate><guid>/posts/screenshot-from-video/</guid><description>La funcionalidad que estoy intentando implementar implica una cuestión muy concreta: necesito mostrar miniaturas de momentos aleatorios de un vídeo en streaming HLS. El ejemplo es el reproductor de YouTube: cuando se arrastra la barra atrás o adelante, se muestra una miniatura para indicar qué parte del vídeo es la afectada.
El método recomendado, en principio, es tener un AVPlayer con el rate establecido a 0, de manera que el propio AVPlayer se encargue de llevar el vídeo a esos momentos, pararlo y mostrar la imagen en la pantalla.</description></item><item><title>Símbolos en el Executable name</title><link>/posts/simbolos-executable-name/</link><pubDate>Tue, 07 Dec 2021 18:15:09 +0100</pubDate><guid>/posts/simbolos-executable-name/</guid><description>Cuando se cambia el nombre mostrado a una app de iOS, si éste tiene símbolos (p.ej Movistar+), es mejor hacerlo directamente en la clave “Bundle display name” del Info.plist, para evitar que la App Store rechace la build.
En el “Executable name” no debe haber símbolos. Y este se genera concatenando varios valores; $EXECUTABLE_PREFIX$PRODUCT_NAME$EXECUTABLE_SUFFIX. Si cambias el valor directamente en el proyecto, se establece esa variable, y al generar la build (o al subirse a TestFlight) dará error.</description></item><item><title>hg strip</title><link>/posts/hg-strip/</link><pubDate>Tue, 07 Dec 2021 18:14:42 +0100</pubDate><guid>/posts/hg-strip/</guid><description>hg strip es una extensión de Mercurial que permite eliminar changesets y todos sus descendientes.
Hay que habilitarla añadiendo lo siguiente al fichero .hgrc
[extensions] strip = A partir de ese momento, hg strip &amp;lt;revisión&amp;gt; sirve para eliminar esa revisión (en número, no en hash) y todas sus descendientes.
La he utilizado para eliminar una rama recién commiteada y no pusheada. El proceso fue:
Abrir nueva rama con el nombre correcto.</description></item><item><title>hg shelve</title><link>/posts/hg-shelve/</link><pubDate>Tue, 07 Dec 2021 18:14:17 +0100</pubDate><guid>/posts/hg-shelve/</guid><description>hg unshelve &amp;lt;nombre&amp;gt; sirve para sacar un changeset de un shelve. Si hay cambios pendientes y se genera un conflicto, terminaremos con dos cabezas en la rama actual, lo cual es un embrollo.
Las dos salidas posibles son:
Llevar a cabo el merge y continuar el unshelve (hg unshelve --continue) Abortar el unshelve (hg unshelve --abort), hacer lo que sea con los cambios pendientes, y reiniciar el unshelve. SourceTree no tiene un comando gráfico para abortar el unshelve.</description></item><item><title>Habilitar SSH sin teclado ni raton en Linux</title><link>/posts/habilitar-ssh-sin-teclado-ni-raton-en-linux/</link><pubDate>Tue, 07 Dec 2021 18:05:06 +0100</pubDate><guid>/posts/habilitar-ssh-sin-teclado-ni-raton-en-linux/</guid><description>The &amp;ldquo;ssh&amp;rdquo; file seems to work for me. I just installed the RPi 4 with ubuntu-server 19.10.1. Here are the full instructions for anbody who finds it:
After you have installed ubuntu-server to your SD-card, mount the first partition (usually /dev/mmcblk0p1) on the machine that you installed the SD-card with.
Next, create a file called &amp;ldquo;ssh&amp;rdquo; on the filesystem root (it does not have to have any content, as long as the file is there when the pi boots the first time, it will enable ssh).</description></item><item><title>Doble Punto Y Coma en Localizable</title><link>/posts/doble-punto-y-coma-en-localizable/</link><pubDate>Tue, 07 Dec 2021 18:04:28 +0100</pubDate><guid>/posts/doble-punto-y-coma-en-localizable/</guid><description>Si en un fichero Localizable.strings ponemos por descuido un doble punto y coma, todas las cadenas definidas a partir de ese error no serán traducidas, y en su lugar veremos en la aplicación las claves sin traducir para esa localización concreta.</description></item><item><title>Ciclo de vida de los UIViewControllers</title><link>/posts/ciclo-de-vida-de-los-uiviewcontrollers/</link><pubDate>Tue, 07 Dec 2021 17:16:07 +0100</pubDate><guid>/posts/ciclo-de-vida-de-los-uiviewcontrollers/</guid><description>Un descubrimiento: en principio desde iOS 13, cuando presentas un viewController encima de otro, no se llaman los métodos viewWillDissapear ni viewDidDissapear del ViewController llamante. La solución, al menos de momento, es poner el modalPresentationStyle del viewController a mostrar, de este modo:
viewController.modalPresentationStyle = .fullScreen Split Screen Hay muchos cambios en el [[Ciclo de vida de los UIViewControllers]] en cuanto metemos en la ecuación la multitarea de iPad, particularmente la funcionalidad de #SplitScreen.</description></item><item><title>Etiquetas</title><link>/tags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tags/</guid><description/></item><item><title>Sobre mí</title><link>/sobre-mi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/sobre-mi/</guid><description>Mi nombre es Manu Mateos, tengo 31 años y actualmente resido en Extremadura. Me dedico a desarrollar para iOS, ahora mismo trabajando en Sngular.
He hecho… Un juguete en colaboración con RTVE, que puedes probar aquí. También puedes ver mi repositorio público en GitHub.</description></item></channel></rss>